# -*- python -*-
#skelfile = 'finemesh.skel'
skelfile = 'sizedistribution.skel'
iterations = 100
factor = 0.7
minsize = 15
#nbins = 7
#nbins = automatic
OOF.Settings.Random_Seed(seed=31415)
OOF.Microstructure.SetHomogeneityParameters(factor=factor, minimumTileSize=minsize, fixedSubdivision=0)
#OOF.Skeleton.SetPSBbins(nx=nbins,ny=nbins)
OOF.File.LoadStartUp.Data(filename=skelfile)
import timeit
print "%12.3g seconds" % timeit.timeit(
    stmt="OOF.Skeleton.Modify(skeleton='small.ppm:skeleton', modifier=Anneal(targets=AllNodes(),criterion=AverageEnergy(alpha=0.3),T=0.0,delta=1.0,iteration=FixedIteration(iterations=iterations)))",
    setup="from __main__ import OOF, Anneal, AllNodes, AverageEnergy, FixedIteration, iterations",
    number=1)
OOF.Microstructure.PrintHomogeneityStats()

# Running on stevens:  oof2 --script testfinemesh.log --batch
# finemesh.skel, 30 iterations
# nbins        time
#   1           6.29
#   2           5.69
#   4           5.98
#   8           6.28
#  10           6.58
#  15           7.19
#  17           7.48
#  17           7.50  automatic.  Far from optimal
#  20           8.40
#  30          11.1

# Automatic choice is far from optimal.

# sizedistribution.skel, 100 iterations
# small.ppm, 4x4 skeleton refined multiple times on left edge.
# Refinement didn't use homogeneity at all.
#   1           5.67
#   2           5.07
#   4           5.08
#   6           5.07
#   8           5.37
#   8x12        5.38  automatic.  Not too bad.
#  10           5.68
#  15           6.28
#  20           6.90
#  30           8.40

# sizedistribution2.skel, 30 iterations.
# One more trisection of elements on left edge.
#   1           5.68
#   2           5.08
#   3           5.09
#   4           4.77, 4.78
#   5           5.08
#   6           5.06
#   8           5.09
#  10           5.10
#  15           5.67
#  24x37        7.48, 7.21  automatic.  Far from optimal.

# ---------------------

# After switching to the hierarchical tiling scheme
# factor  minsize  time #levels maxSubdiv

# sizedistribution2.skel, 30 iterations
# 0.1     1        3.26    3       99
# 0.1    10        2.95    2       10
# 0.5     1        3.27    8      128
# 0.5     5        3.25    5       16
# 0.5    10        3.26    4        8
# 0.5   100        3.56    1        1  <-- still better than non-hier. method?!
# 0.7     1        3.57   13      147
# 0.7     5        3.26    8       24
# 0.7    10        3.26    6       12
# 0.8     1        3.56   19      135
# 0.8     5        3.26   12       28
# 0.8    10        2.95    9       14  repeat: 2.95, 3.26, 3.25 ??
# 0.8   100        3.57    1        1
# 0.9     1        4.18   35      141
# 0.9    10        3.24   13       13

# sizedistribution.skel, 100 iterations
# 0.1     1        3.25    2       10
# 0.5     1        3.26    7       64
# 0.5    10        3.55    4        8  repeat: 3.26, 2.96, 2.94, 3.26 ??
# 0.5   100        3.56    1        1
# 0.7     1        3.26   11       72
# 0.7     5        3.27    8       24
# 0.7    10        3.26    6       12
# 0.7    15        3.26    5        8  repeat: 2.95, 3.26, 2.96, 3.25
#                     unthreaded 2.86, 2.84, 3.10, 2.77, 2.76, 2.76

# finemesh.skel, 30 iterations
# 0.1     1        5.98    3       99
# 0.1    10        6.00    2       10
# 0.5     1        6.00    7      128
# 0.5     5        5.68    4       16  repeat: 5.68, 5.69
# 0.5    10        6.00    3        8  repeat: 5.68
# 0.5    20        5.98    2        4
# 0.5    40        5.97    2        2
# 0.5   100        6.88    1        1  rep. 6.59, not as good as non-hier method
# 0.7     1        6.29   10      103
# 0.7     5        6.29    6       24  rep 6.00, 6.00
# 0.7    10        5.97    4       12
# 0.7    20        5.99    2        5
