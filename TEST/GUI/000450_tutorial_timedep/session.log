OOF.Microstructure.New(name='microstructure', width=1.0, height=1.0, width_in_pixels=10, height_in_pixels=10)
OOF.Material.New(name='material', material_type='bulk')
OOF.Property.Parametrize.Mechanical.Elasticity.Isotropic(cijkl=IsotropicRank4TensorBulkShear(bulk=0.5,shear=0.25))
OOF.Material.Add_property(name='material', property='Mechanical:Elasticity:Isotropic')
OOF.Property.Parametrize.Mechanical.ForceDensity.ConstantForceDensity(gx=0.0, gy=-0.3)
OOF.Material.Add_property(name='material', property='Mechanical:ForceDensity:ConstantForceDensity')
OOF.Property.Parametrize.Mechanical.MassDensity.ConstantMassDensity(rho=1.0)
OOF.Material.Add_property(name='material', property='Mechanical:MassDensity:ConstantMassDensity')
OOF.Property.Parametrize.Mechanical.Viscosity.Isotropic(gijkl=IsotropicRank4TensorBulkShear(bulk=0.07,shear=0.25))
OOF.Material.Add_property(name='material', property='Mechanical:Viscosity:Isotropic')
OOF.Material.Assign(material='material', microstructure='microstructure', pixels=every)
OOF.Skeleton.New(name='skeleton', microstructure='microstructure', x_elements=8, y_elements=8, skeleton_geometry=QuadSkeleton(left_right_periodicity=False,top_bottom_periodicity=False))
OOF.Mesh.New(name='mesh', skeleton='microstructure:skeleton', element_types=['D2_2', 'T3_3', 'Q4_4'])
OOF.Subproblem.Field.Define(subproblem='microstructure:skeleton:mesh:default', field=Displacement)
OOF.Subproblem.Field.Activate(subproblem='microstructure:skeleton:mesh:default', field=Displacement)
OOF.Mesh.Field.In_Plane(mesh='microstructure:skeleton:mesh', field=Displacement)
OOF.Subproblem.Equation.Activate(subproblem='microstructure:skeleton:mesh:default', equation=Force_Balance)
OOF.Mesh.Boundary_Conditions.New(name='bc', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ConstantProfile(value=0.0),boundary='bottom'))
OOF.Mesh.Boundary_Conditions.New(name='bc<2>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='y',equation=Force_Balance,eqn_component='x',profile=ConstantProfile(value=0.0),boundary='bottom'))
OOF.Mesh.Scheduled_Output.New(mesh='microstructure:skeleton:mesh', name=AutomaticName('GraphicsUpdate'), output=GraphicsUpdate())
OOF.Mesh.Scheduled_Output.Schedule.Set(mesh='microstructure:skeleton:mesh', output=AutomaticName('GraphicsUpdate'), scheduletype=AbsoluteOutputSchedule(), schedule=Periodic(delay=0.0,interval=0.1))
OOF.Mesh.Scheduled_Output.New(mesh='microstructure:skeleton:mesh', name=AutomaticName('Average Displacement on top'), output=BoundaryAnalysis(operation=AverageField(field=Displacement),boundary='top'))
OOF.Mesh.Scheduled_Output.Schedule.Copy(mesh='microstructure:skeleton:mesh', source=AutomaticName('GraphicsUpdate'), targetmesh='microstructure:skeleton:mesh', target=AutomaticName('Average Displacement on top'))
OOF.Mesh.Scheduled_Output.Destination.Set(mesh='microstructure:skeleton:mesh', output=AutomaticName('Average Displacement on top'), destination=OutputStream(filename='disp.out',mode='w'))
OOF.Named_Analysis.Create(name='analysis', operation=AverageOutput(), data=getOutput('Field:Component',component='y',field=Displacement), domain=EntireMesh(), sampling=ElementSampleSet(order=automatic))
OOF.Mesh.Scheduled_Output.New(mesh='microstructure:skeleton:mesh', name=AutomaticName('analysis'), output=NamedAnalysisOutput(analysis='analysis'))
OOF.Mesh.Scheduled_Output.Schedule.Copy(mesh='microstructure:skeleton:mesh', source=AutomaticName('Average Displacement on top'), targetmesh='microstructure:skeleton:mesh', target=AutomaticName('analysis'))
OOF.Mesh.Scheduled_Output.Destination.Set(mesh='microstructure:skeleton:mesh', output=AutomaticName('analysis'), destination=OutputStream(filename='disp.out',mode='w'))
OOF.Subproblem.Set_Solver(subproblem='microstructure:skeleton:mesh:default', solver_mode=AdvancedSolverMode(time_stepper=AdaptiveDriver(tolerance=0.0001,initialstep=0.1,minstep=1e-05,errorscaling=AbsoluteErrorScaling(),stepper=TwoStep(singlestep=SS22(theta1=0.5,theta2=0.5))),nonlinear_solver=NoNonlinearSolver(),symmetric_solver=ConjugateGradient(preconditioner=ICPreconditioner(),tolerance=1e-13,max_iterations=1000),asymmetric_solver=BiConjugateGradient(preconditioner=ICPreconditioner(),tolerance=1e-13,max_iterations=1000)))
OOF.Mesh.Set_Field_Initializer(mesh='microstructure:skeleton:mesh', field=Displacement, initializer=FuncTwoVectorFieldInit(fx='0.0',fy='0.1*x*y'))
OOF.Windows.Graphics.New()
OOF.Graphics_1.Layer.New(category='Mesh', what='microstructure:skeleton:mesh', how=MeshEdgeDisplay(when=latest,where=getOutput('original'),color=TranslucentGray(value=0.0,alpha=1.0),width=0.5))
OOF.Mesh.Apply_Field_Initializers(mesh='microstructure:skeleton:mesh')
OOF.Graphics_1.Layer.Edit(n=3, category='Mesh', what='microstructure:skeleton:mesh', how=MeshEdgeDisplay(when=latest,where=getOutput('actual'),color=TranslucentGray(value=0.0,alpha=1.0),width=0.5))
OOF.Graphics_1.Layer.New(category='Skeleton', what='microstructure:skeleton', how=SkeletonEdgeDisplay(color=TranslucentGray(value=0.719697,alpha=1),width=0.5))
OOF.Graphics_1.Layer.Lower.To_Bottom(n=4)
