#!/usr/bin/env python

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov. 


# Script for building a distribution of OOF2 using python distutils.
# Takes care of git and distutils stuff, and sets the version number
# in the packaged source code.

# This script assumes that the version to be packaged is the HEAD of
# the master branch on github.  The previous cvs versions of this
# script allowed a release to be built from any cvs branch.  If we
# want the oof version number to be stored in the committed versions
# of setup.py and oofversion.py, however, then we can only set the oof
# version number on one branch.  If we released from different branch,
# we'd get a conflict if and when the branch was later merged into
# master.  This wasn't so much of a problem in cvs, because the
# repository was private, and so it didn't matter if the branch number
# was never set in the committed files.

# The options are:
#    --version     a string of nonpunctuation characters and dots (required)
#    --comment     a string containing no dots (optional)

import getopt
import os
import os.path
import shutil
import subprocess
import sys
import tempfile
import time

options = ['version=', 'comment=', 'dryrun', 'help', 'noclean']

def state_options_and_quit():
    print >> sys.stderr,  \
"""Options are:
version=<version number>  version number can contain numbers, letters, and dots
comment=<comment>         optional comment, cannot contain dots or spaces 

Debugging options are:
noclean                   don't remove temp directory
dryrun                    don't actually do anything in distutils
help                      print this
"""
    sys.exit()

cvsmodule = 'OOF2'

def run_cmd(*args):
    cmd = ' '.join(args)
    print >> sys.stderr, cmd
    status = os.system(cmd)
    if status != 0:
        print >> sys.stderr, "make_dist failed."
        sys.exit(status)

version = None
comment = None
branch = None
dryrun = False
noclean = False
dimension = 2

try:
    optlist, args = getopt.getopt(sys.argv[1:], '', options)
except getopt.error, message:
    print message
    sys.exit()

for opt in optlist:
    if opt[0] == '--version':
        version = opt[1]
    elif opt[0] == '--comment':
        comment = opt[1]
    elif opt[0] == '--noclean':
        noclean = True
    elif opt[0] == '--dryrun':
        dryrun = True
    elif opt[0] == '--help':
        state_options_and_quit()

print >> sys.stderr, "Building OOF2 distribution named", version

startdir = os.getcwd()

# Are we building oof2 or oof3d? This info is stored in
# distname.distname.  We get this from the directory in which
# make_dist is being run.
import distname

# Create a temp directory.
tempdir = tempfile.mkdtemp(prefix='oof-tempdir-'+version+'-')
print >> sys.stderr, "Using temp directory", tempdir

try:
    # Get the git repository location
    proc = subprocess.Popen(['git', 'remote', 'get-url', 'origin'],
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdoutdata, stderrdata = proc.communicate()
    if stderrdata:
        print "*** Failed to get git repository!", stderrdata.strip()
        sys.exit(1)
    giturl = stdoutdata.strip()

    # cd to the temp directory
    os.chdir(tempdir)

    # Clone the git repository into a directory whose name is given by
    # the oof version number: oof2-version or oof3d-version
    distdir = distname.distname + "-" + version
    # Use --quiet so that stderr is empty if the command succeeds.
    cmd = ['git', 'clone', '--quiet', 'giturl', distdir]
    cmd.extend([giturl, tempdir])
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdoutdata, stderrdata = proc.communicate()
    if stderrdata:
        print "*** Failed to clone git repository!", stderrdata.strip()
        sys.exit(1)

    # cd to the cloned source code directory
    os.chdir(distdir)

    import localexclusions
    
    # Set the version number in oofversion.py.
    sedcmd = 's/version_from_make_dist = \"[0-9]*\.[0-9]*\.[0-9]*\""/version_from_make_dist=\"%s\"/' % version
    tmpfile, tmpfilename = tempfile.mkstemp(dir=tempdir)
    run_cmd('sed "%s" setup.py > %s' % (sedcmd, tmpfilename))
    print >> sys.stderr, "Moving", tmpfilename, "to setup.py"
    os.rename(tmpfilename, 'setup.py')
    run_cmd('sed "%s" SRC/common/oofversion.py > %s' % (sedcmd, tmpfilename))
    # run_cmd('sed "s/[0-9]*\.[0-9]*\.[0-9]*\./%s/" SRC/common/oofversion.py > %s'
    #         % (version, tmpfilename))
    print >> sys.stderr, "Moving", tmpfilename, "to SRC/common/oofversion.py"
    os.rename(tmpfilename, 'SRC/common/oofversion.py')

    # Make a timestamp file for the distribution.
    timefile = file("package_date", "w")
    print >> timefile, time.ctime()
    timefile.close()

    
    # Make the MANIFEST file. 

    # If we don't provide a MANIFEST, or let distutils build it from a
    # MANIFEST.in template, then it tries to include the swig output files
    # since they're contained in setup.py's packages list.  But those
    # files don't exist in git, so the distutils sdist command will fail.
    # We have to construct an explicit list of files to include, which is
    # everything that's in git except for the files listed below:

    globalExcludeDirs = [
        ".git"
    ] + localexclusions.globalExcludeDirs

    excludeDirs = [
        "math", 
        "NOTES", 
        "3DSandbox",
        "SRC/TEST-DATA", "SRC/TEST-SRC",
        "SRC/common/EXTRA",
        "SRC/engine/EXTRA",
        "SRC/engine/PETSc",
        "SRC/image/GRAINBDY", "SRC/image/imagemanip"
    ] + localexclusions.excludeDirs

    globalExcludeFiles = [
        ".gitignore"
    ] + localexclusions.globalExcludeFiles

    excludeFiles = [
        "localexclusions.py", "distname.py",
        "make_dist",
        "oof2-build", "oof2-clean",
        "SRC/header", "SRC/header.py",
        "SRC/maketags"
    ] + localexclusions.excludeFiles

    excludeDirs = [os.path.join(distdir, f) for f in excludeDirs]
    excludeFiles = [os.path.join(distdir, f) for f in excludeFiles]

    def getFiles(path, manifest):
        if os.path.isdir(path):
            files = os.listdir(path) # just file name, no path components
            for f in files:
                if path != ".":
                    fname = os.path.join(path, f)
                else:
                    fname = f
                if (os.path.isfile(fname) and f not in globalExcludeFiles and
                    fname not in excludeFiles) :
                    print >> manifest, fname
                if (os.path.isdir(fname) and f not in globalExcludeDirs and
                    fname not in excludeDirs):
                    getFiles(fname, manifest)

    manifest = open("MANIFEST", "w")
    getFiles(distdir, manifest)   
    manifest.close()

    # Check all the modifications into git, and tag with the version number.
    run_cmd("git add SRC/common/oofversion.py package_date MANIFEST")
    commit_msg = ("Building " + distname.distname + " release version " +
                  version)
    if comment:
        commit_msg += " -- " + comment

    if not dryrun:
        run_cmd('git commit -m "%s"' % commit_msg)
        run_cmd('git tag "release-' + version + '"')
        run_cmd('git push origin master')
    else:
        print >> sys.stderr, "Dry run! Not running:"
        print >> sys.stderr, '*** git commit -m "%s"' % commit_msg
        print >> sys.stderr, '*** git tag "release-' + version + '"'
        print >> sys.stderr, '*** git push origin master'
    
    # Build the distribution.
    distfilename = distdir + ".tar.gz"
    print >> sys.stderr, "Distribution file is", distfilename
    run_cmd("tar -T MANIFEST -czf", distfilename)
    print >> sys.stderr, "Moving", distfilename, "to", startdir
    os.rename(distfilename, os.path.join(startdir, distfilename))

finally:
    if not noclean:
        print >> sys.stderr, "Removing", tempdir
        shutil.rmtree(tempdir)
    else:
        print >> sys.stderr, "Not removing", tempdir


print >> sys.stderr, "Done.", distfilename, "is ready."
print >> sys.stderr, \
"""To publish it, copy it to WEBPAGES/oof2/source and edit
WEBPAGES/oof2/index.html.  Remember to check that the README file in
WEBPAGES/oof2/source is up to date."""
