# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modifed
# versions of this software, you first contact the authors at
# oof_manager@nist.gov.

cmake_minimum_required(VERSION 3.16)
project(oof2 VERSION 2.2.3)

if("$ENV{CONDA_PREFIX}")
  message("CONDA_PREFIX is $ENV{CONDA_PREFIX}")
else()
  message("CONDA_PREFIX is not defined")
endif()

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# OOF2/SRC subdirectories containing python files to install.  The
# entire hierarchies under these will be installed in
# .../site-packages/oof2/ooflib.

set(oofdirs
  common
  engine
  image
  orientationmap
  tutorials
  EXTENSIONS
  )

# OOF2 libraries to build

set(ooflibs
  oof2common
  oof2commonGUI
  oof2engine
  oof2image
  oof2orientationmap
  )

# executable python scripts to install, after changing @PYEXEC@ to the
# full path name of the desired python version.
## TODO PYTHON3: Just use Python3_EXECUTABLE instead of PYEXEC.  We
## don't need PYEXEC.

set(oofscripts
  oof2
  oof2-test
  oof2-guitest
  )

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# Required version numbers for dependencies

set(OOFCANVAS_MIN_VERSION 1.1.0)
set(MAGICK_MIN_VERSION 6.0.0)
set(MAGICK_MAX_VERSION 7.0.0)
set(GTK3_MIN_VERSION 3.22)

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# Call swig_sources in the CMakeLists.txt files in all subdirectories
# that contain swig files.
#  swig_sources(
#        SWIGFILES  a b      # .swg suffix is assumed
#        LIBRARIES  <names of libraries to link to, must be cmake targets>
#        CFLAGS <additional compiler options>)


function(swig_sources)
  set(multiValueArgs SWIGFILES LIBRARIES CFLAGS INCLUDE_DIRECTORIES)
  cmake_parse_arguments(PARSE_ARGV 0 SS "" "" "${multiValueArgs}")
  # "SS" for Swig_Sources

  foreach(swigfile ${SS_SWIGFILES})
    set_property(
      SOURCE ${swigfile}.swg
      PROPERTY CPLUSPLUS ON)
    # Set include directories for the swig command.
    set_property(
      SOURCE ${swigfile}.swg
      PROPERTY INCLUDE_DIRECTORIES
      ${CMAKE_CURRENT_SOURCE_DIR}
      ${PROJECT_SOURCE_DIR}/SRC
      ${SS_INCLUDE_DIRECTORIES})
    # Set include directories for the compiler
    set_property(
      SOURCE ${swigfile}.swg
      PROPERTY GENERATED_INCLUDE_DIRECTORIES
      ${SS_INCLUDE_DIRECTORIES}
      ${CMAKE_CURRENT_SOURCE_DIR}
      ${PROJECT_SOURCE_DIR}/SRC
      ${PROJECT_BINARY_DIR}	# for headers generated by configure_file
      ${PYINCL}
      ${Python3_INCLUDE_DIRS})
    set_property(
      SOURCE ${swigfile}.swg
      PROPERTY GENERATED_COMPILE_OPTIONS
      ${OOFCANVAS_CFLAGS})
    swig_add_library(
      ${swigfile}
      TYPE MODULE
      LANGUAGE PYTHON
      SOURCES ${swigfile}.swg)

    ## OOFCANVAS_LINK_LIBRARIES contains the full paths.  Why isn't
    ## the library found?
    target_link_libraries(
      ${swigfile}
      PUBLIC
      ${Python3_LIBRARIES})
    target_link_libraries(
      ${swigfile}
      PUBLIC
      ${SS_LIBRARIES})
    target_link_libraries(
      ${swigfile}
      PUBLIC
      ${OOFCANVAS_LINK_LIBRARIES}
      )

    # Get the path from the top of the source directory hierarchy to
    # the current directory.  This is the path from the top of the
    # installation directory hierarchy to the installation directory
    # for the compiled swig output and python file.

    # file(RELATIVE_PATH ...) has been superseded by cmake_path(...)
    # in cmake 3.20, but 3.20 isn't available on Ubuntu 20.04.
    if(${CMAKE_VERSION} VERSION_LESS "3.20")
      file(
	RELATIVE_PATH relpath	     # this is the path ...
	${PROJECT_SOURCE_DIR}/SRC    # ... from here ...
	${CMAKE_CURRENT_SOURCE_DIR}) # ... to here
    else()
      set(relpath ${CMAKE_CURRENT_SOURCE_DIR})
      cmake_path(
	RELATIVE_PATH
	relpath			# Change this path ...
	BASE_DIRECTORY ${PROJECT_SOURCE_DIR}/SRC) # ... to be relative to this
    endif()
    # Install the swig-generated and compiled library
    install(
      TARGETS ${swigfile}
      DESTINATION ${PYDEST}/ooflib/SWIG/${relpath})
    # Install the swig-generated python file
    install(
      FILES ${CMAKE_CURRENT_BINARY_DIR}/${swigfile}.py
      DESTINATION ${PYDEST}/ooflib/SWIG/${relpath})
  endforeach()

endfunction()

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

set(oof_build_types Debug Release)
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${oof_build_types})
set(CMAKE_BUILD_TYPE Release CACHE STRING "Debug or Release")

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  set(DEBUG True)
endif(CMAKE_BUILD_TYPE STREQUAL "Debug")

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# Set C++ version
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS False)	# use -std=c++11 instead of -std=gnu++11
set(CMAKE_CXX_STANDARD_REQUIRED True) # don't fall back to an earlier standard

set(BUILD_SHARED_LIBS ON)

# On macOS 12, we need to set RPATH or libraries installed outside the
# default locations won't be found.
set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/lib)

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# Find dependencies

# Find Python3.
set(Python3_ROOT /opt/local) # Use MacPorts if available
## TODO: Allow user to choose python sub version
include(FindPython)
find_package(Python3 3.9 EXACT COMPONENTS Interpreter Development)
set(PYVERSION ${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR})
set(PYEXEC ${Python3_EXECUTABLE})

# message("Python3 is ${Python3_EXECUTABLE}")
# message("Python3_INCLUDE_DIRS is ${Python3_INCLUDE_DIRS}")
# message("Python3_LIBRARIES is ${Python3_LIBRARIES}")

set(PYDEST lib/python${PYVERSION}/site-packages/${CMAKE_PROJECT_NAME})
# message("PYDEST is ${PYDEST}")

include(FindBLAS)
 
include(FindSWIG)
include(UseSWIG)
find_package(SWIG 4.1 COMPONENTS python)
## UseSWIG can generate dependencies only for cmake >= 3.20.  Setting
## the flag for it is harmless even if it doesn't always work.
set(SWIG_USE_SWIG_DEPENDENCIES True)
set(UseSWIG_TARGET_NAME_PREFERENCE STANDARD)
set(SWIG_SOURCE_FILE_EXTENSIONS ".swg" ".i")
if(${SWIG_VERSION} VERSION_LESS "4.1")
  set(CMAKE_SWIG_FLAGS -py3)
endif()
# add_compile_definitions(SWIG_TYPE_TABLE=oof2)
if(${SWIG_USE_BUILTIN})		# wishful thinking
  list(APPEND CMAKE_SWIG_FLAGS -builtin)
endif()

# Use pkg-config to get info about dependencies
include(FindPkgConfig)
# MacPorts puts some pkg-config files in the python library
if(APPLE)
set(ENV{PKG_CONFIG_PATH}
  "$ENV{PKG_CONFIG_PATH}:${Python3_LIBRARY_DIRS}/pkgconfig")
endif()
if($ENV{CONDA_PREFIX})
  set(ENV{PKG_CONFIG_PATH}
    "$ENV{PKG_CONFIG_PATH}:$ENV{CONDA_PREFIX}/lib/pkgconfig")
endif()
message("PKG_CONFIG_PATH is $ENV(PKG_CONFIG_PATH)")

pkg_check_modules(
  OOFCANVAS REQUIRED
  oofcanvas>=${OOFCANVAS_MIN_VERSION})
list(APPEND CMAKE_INSTALL_RPATH ${OOFCANVAS_LIBDIR})

## Dump all variables
# get_cmake_property(_variableNames VARIABLES)
# list (SORT _variableNames)
# foreach (_variableName ${_variableNames})
#     message(STATUS "${_variableName}=${${_variableName}}")
# endforeach()

pkg_check_modules(
  MAGICK REQUIRED
  Magick\+\+>=${MAGICK_MIN_VERSION}
  Magick\+\+<${MAGICK_MAX_VERSION})
pkg_check_modules(
  GTK3 REQUIRED
  gtk+-3.0>=${GTK3_MIN_VERSION})

include(TestForSSTREAM)		# sets CMAKE_NO_ANSI_STRING_STREAM
## TODO: Is there a non-stupid way of setting HAVE_SSTREAM?
if(NOT ${CMAKE_NO_ANSI_STRING_STREAM})
  set(HAVE_SSTREAM True)
endif()

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# Create the shared library targets, which are listed in the ooflibs
# macro defined above.

foreach(olib ${ooflibs})
  add_library(${olib} SHARED)
  target_include_directories(${olib}
    PUBLIC
    ${PROJECT_BINARY_DIR}
    ${CMAKE_CURRENT_BINARY_DIR}
    ${PROJECT_SOURCE_DIR}/SRC
    ## TODO: Don't add all include dirs here. Use only as required by
    ## setting property INCLUDE_DIRECTORIES on source files
    ${Python3_INCLUDE_DIRS} 
    ${OOFCANVAS_INCLUDE_DIRS}
    ${MAGICK_INCLUDE_DIRS}
    ${GTK3_INCLUDE_DIRS}
    )
  # It's necessary to include OOFCANVAS_CFLAGS for all files that
  # include oofcanvas.h, because oofcanvas.h indirectly includes
  # ImageMagick headers, and ImageMagick complains bitterly if
  # MAGICKCORE_QUANTUM_DEPTH isn't defined.  OOFCANVAS_CFLAGS includes
  # the ImageMagick preprocessor definitions that it used.  This
  # results in the ImageMagick definitions being used in far more
  # places than actually necessary, which is messy but probably
  # harmless.
  target_compile_options(${olib}
    PRIVATE
    -Wno-deprecated-register
    ${OOFCANVAS_CFLAGS})
endforeach()

configure_file(
  ${PROJECT_SOURCE_DIR}/oofconfig.h.in
  ${PROJECT_BINARY_DIR}/oofconfig.h
  @ONLY
  )

foreach(script ${oofscripts})
  configure_file(
  ${PROJECT_SOURCE_DIR}/${script}.in
  ${PROJECT_BINARY_DIR}/${script}
  @ONLY
  )
endforeach()

target_link_libraries(oof2common
  PRIVATE
  ${Python3_LIBRARIES}
  ${OOFCANVAS_LINK_LIBRARIES}
  ${BLAS_LIBRARIES}
  )

target_link_libraries(oof2commonGUI
  PRIVATE
  ${Python3_LIBRARIES}
  ${OOFCANVAS_LINK_LIBRARIES}
  oof2common
  )

target_link_libraries(oof2engine
  PRIVATE
  ${Python3_LIBRARIES}
  ${OOFCANVAS_LINK_LIBRARIES}
  ${BLAS_LIBRARIES}
  oof2common
  )

target_link_libraries(oof2image
  PRIVATE
  ${Python3_LIBRARIES}
  ${OOFCANVAS_LINK_LIBRARIES}
  oof2common
  ${MAGICK_LINK_LIBRARIES}
  )

target_link_libraries(oof2orientationmap
  PRIVATE
  ${Python3_LIBRARIES}
  ${OOFCANVAS_LINK_LIBRARIES}
  oof2common
  oof2engine
  oof2image
  ${MAGICK_LINK_LIBRARIES}
  )
  
add_subdirectory(SRC)

# Install compiled libraries

install(
  TARGETS
  oof2common
  oof2commonGUI
  oof2engine
  oof2image
  oof2orientationmap
  DESTINATION lib)

# Install python files from SRC subdirectories, excluding SWIG output

foreach(pydir ${oofdirs})
  install(DIRECTORY SRC/${pydir}
    DESTINATION ${PYDEST}/ooflib/
    FILES_MATCHING
    PATTERN "*.py"
    PATTERN EXTRA EXCLUDE
    PATTERN DIR.py EXCLUDE # TODO: delete this line after DIR.py files go away
    )
endforeach()

# Create and install the top level __init__.py files. 

file(TOUCH ${PROJECT_BINARY_DIR}/__init__.py)

install(
  FILES
  ${PROJECT_BINARY_DIR}/__init__.py
  DESTINATION
  ${PYDEST}
  )

install(
  FILES
  ${PROJECT_BINARY_DIR}/__init__.py
  DESTINATION
  ${PYDEST}/ooflib
  )
  
# Install the start up and test wrapper scripts

install(
  PROGRAMS
  ${CMAKE_BINARY_DIR}/oof2
  ${CMAKE_BINARY_DIR}/oof2-test
  ${CMAKE_BINARY_DIR}/oof2-guitest
  DESTINATION bin)

# Install the TEST and GUITEST directories and their data

install(
  DIRECTORY TEST
  DESTINATION ${PYDEST}
  ## TODO: This will possibly install too much.  Use patterns or exclusions.
  # FILES_MATCHING 
  # PATTERN "*.py"
  # PATTERN "*.dat"
  )


## TODO: When creating a distribution, check that the various
## typemaps.swg files are included.  They're not explicitly listed as
## source file elsewhere.
