# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov. 

from ooflib.common import debug


# All Python exceptions must be derived from Exception.  The C++
# version of that is PyObject *PyExc_Exception, which is not something
# that can be used as a C++ base class, unfortunately.

class OOFPyError(Exception):
    def __init__(self, cerror):
        self.cerror = cerror
    def __repr__(self):
        return f"<{self.cerror}>"
    

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# Routine to set up the callback that converts C++ exceptions to
# Python exceptions.  This gets automatically run when this module is
# imported, which guarantees that it will be in place before any
# high-level calls from "pure Python" happen.

def pyErrorCallback(str):
    try:
        raise OOFPyError(errorstring)
    except TypeError:
        debug.fmsg("Error while raising exception! str=", errorstring,
                   type(errorstring))
        raise

pyErrorInit(pyErrorCallback)

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

import traceback

class ErrPyProgrammingError(ErrProgrammingError):
    def __init__(self, message):
        stack = traceback.extract_stack()
        # The actual error is two up from us in the stack.
        (file, lineno, func, txt) = stack[-2] 
        ErrProgrammingError.__init__(self, message, file, lineno)
    def __repr__(self):
        return self.summary() 
        

def _ErrProgrammingError___repr__(self):
    return self.summary()+"\n("+self.filename()+":"+"%d"%self.lineno() + ")"

ErrProgrammingError.__repr__ = _ErrProgrammingError___repr__



class ErrDataFileError(ErrUserError):
    pass

class ErrWarning(ErrUserError):
    pass


def registerErrorClass(eclass):
    "Allow an error class to be raised from the SWIGged wrapper functions."
    g = globals()
    g[eclass.__name__] = eclass

registerErrorClass(ErrNoProgress) # Why is this the only one registered here?

