#import ramberg_osgood
#print ramberg_osgood.__file__
from ooflib.EXTENSIONS import ramberg_osgood
OOF.Microstructure.New(name='microstructure', width=1.0, height=1.0, width_in_pixels=10, height_in_pixels=10)
OOF.Material.New(name='material', material_type='bulk')
OOF.Material.Add_property(name='material', property='Mechanical:Elasticity:RambergOsgood')
OOF.Material.Assign(material='material', microstructure='microstructure', pixels=all)
OOF.Skeleton.New(name='skeleton', microstructure='microstructure', x_elements=4, y_elements=4, skeleton_geometry=QuadSkeleton(left_right_periodicity=False,top_bottom_periodicity=False))
OOF.Mesh.New(name='mesh', skeleton='microstructure:skeleton', element_types=['D2_2', 'T3_3', 'Q4_4'])
OOF.Subproblem.Field.Define(subproblem='microstructure:skeleton:mesh:default', field=Displacement)
OOF.Subproblem.Field.Activate(subproblem='microstructure:skeleton:mesh:default', field=Displacement)
OOF.Mesh.Field.In_Plane(mesh='microstructure:skeleton:mesh', field=Displacement)
OOF.Subproblem.Equation.Activate(subproblem='microstructure:skeleton:mesh:default', equation=Force_Balance)
OOF.Mesh.Boundary_Conditions.New(name='bc', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ConstantProfile(value=0.0),boundary='left'))
OOF.Mesh.Boundary_Conditions.New(name='bc<2>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ConstantProfile(value=0.10000000000000001),boundary='right'))
OOF.Mesh.Boundary_Conditions.New(name='bc<3>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='y',equation=Force_Balance,eqn_component='y',profile=ConstantProfile(value=0.0),boundary='bottomleft'))
OOF.Subproblem.Set_Solver(
    subproblem="microstructure:skeleton:mesh:default",
    solver_mode=AdvancedSolverMode(
        time_stepper=StaticDriver(),
        nonlinear_solver=Newton(
            relative_tolerance=1.e-08,
            absolute_tolerance=1.e-08,
            maximum_iterations=10),
        symmetric_solver=ConjugateGradient(
            preconditioner=ILUTPreconditioner(),
            tolerance=1.e-13,
            max_iterations=1000),
        asymmetric_solver=StabilizedBiConjugateGradient(
            preconditioner=ILUTPreconditioner(),
            tolerance=1.e-13,
            max_iterations=1000)))
    
                                   
f = open('strain.dat','w')
for i in range(10):
    bc = 0.1+0.05*i
    print( bc)
    print(bc, file=f)
    OOF.Mesh.Boundary_Conditions.Edit(name='bc<2>', mesh='microstructure:skeleton:mesh', condition=DirichletBC(field=Displacement,field_component='x',equation=Force_Balance,eqn_component='x',profile=ConstantProfile(value=bc),boundary='right'))
    OOF.Mesh.Solve(mesh="microstructure:skeleton:mesh", endtime=0)
    OOF.Mesh.Boundary_Analysis(mesh='microstructure:skeleton:mesh', boundary='right', analyzer=IntegrateBdyFlux(flux=Stress), destination='stress.dat')
