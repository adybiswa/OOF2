# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov. 

from ooflib.common import debug
from ooflib.common import utils
from ooflib.SWIG.engine import planarity

def _Flux___hash__(self):
    return self.objectid()

Flux.__hash__ = _Flux___hash__

# Fluxes are sometimes stored in an OrderedSet and need to have __lt__
# defined.

def _Flux___lt__(self, other):
    try:
        return self.objectid() < other.objectid()
    except:
        return NotImplemented

class _AllFluxes:
    def __getitem__(self, indx):
        if isinstance(indx, int):
            if indx >= countFluxes():
                raise IndexError("Bad flux index: " + str(indx))
            return getFluxByIndex(indx)
        elif isinstance(indx, (str, bytes)):
            try:
                flx = utils.OOFeval(indx)
            except NameError:
                raise IndexError("Bad flux name: " + indx)
            if not isinstance(flx, Flux):
                raise IndexError("Bad flux name: " + indx)
            return flx
    def __len__(self):
        return countFluxes()

allFluxes = _AllFluxes()

def getFlux(which):
    return allFluxes[which]

utils.OOFdefine('getFlux', getFlux)

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

def _fluxiter(comps):
    beginp = comps.begin()
    endp = comps.end()
    while beginp != endp:
        yield beginp.current()
        beginp.increment()

def _Flux_components(self, plan=planarity.ALL_INDICES):
    return _fluxiter(self.c_components(plan))

Flux.components = _Flux_components

def _Flux_divergenceComponents(self):
    return _fluxiter(self.c_divergenceComponents())

Flux.divergenceComponents = _Flux_divergenceComponents

def _Flux_outOfPlaneComponents(self):
    return _fluxiter(self.c_outOfPlaneComponents())

Flux.outOfPlaneComponents = _Flux_outOfPlaneComponents
