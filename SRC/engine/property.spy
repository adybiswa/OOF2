# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov. 

from ooflib.common import debug

# Add class data to the Property class.  The "registry" data member
# is used by the Registration class to muck about with parameters and
# so forth.

Property.registry = []

def _Property___eq__(self, other):
    if isinstance(other, Property) and other.this == self.this:
        return 1
    return 0

Property.__eq__ = _Property___eq__

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# Property.bookkeeping is called by Material.cross_reference

def _Property_bookkeeping(self, material):
    material.registerPropertyType(self, self.registration().propertyType())
    for field in self.registration().fields():
        field.registerProperty(self)
    for flux in self.registration().fluxes():
        material.registerFlux(self, flux)
    for eqn in self.registration().equations():
        material.registerEqn(self, eqn)
    for propertyoutput in self.registration().outputs():
        material.registerOutput(self, propertyoutput)
    
Property.bookkeeping = _Property_bookkeeping

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

def _Property_is_active(self, subproblem):
    # If this property has time_deriv_fields, and the stepper is
    # static, then the property isn't active.
    eqns = subproblem.all_equations()
    if (eqns and subproblem.staticStepper()
        and self.registration().time_deriv_fields(*eqns)):
        return False

    if self.is_computable(subproblem):
        pfluxes = self.registration().fluxes()
        peqns = self.registration().equations()
        # If the Property has no fluxes or equations, it must be used
        # by other Properties, so call it active.
        if not pfluxes and not peqns:
            return True
        for flux in pfluxes:
            if subproblem.is_active_flux(flux):
                return True
        for eqn in peqns:
            if subproblem.is_active_equation(eqn):
                return True
    return False

Property.is_active = _Property_is_active

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# Is the Property nonlinear in the given fields? 

def _Property_is_nonlinear(self, fields):
    return self.registration().nonlinear(fields)

Property.is_nonlinear = _Property_is_nonlinear

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# The set_mesh_data/get_mesh_data machinery in Python is completely
# independent of the machinery in C++.  Properties defined in Python
# can call set_mesh_data and get_mesh_data to store and retrieve
# FEMesh-specific data.

def _set_mesh_data(self, mesh, data):
    mesh.set_mesh_data(self, data)

Property.set_mesh_data = _set_mesh_data

def _get_mesh_data(self, mesh):
    return mesh.get_mesh_data(self)

Property.get_mesh_data = _get_mesh_data

def _clear_mesh_data(self, mesh, data):
    # Callback function to be redefined in derived classes.  Called
    # when  destroyed or data is overwritten in FEMesh.
    pass

Property.clear_mesh_data = _clear_mesh_data
