# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov. 

from ooflib.SWIG.common import config

NodePtr.__repr__ = lambda self:"Node(%d,%s,%s)" % (self.index(), self[0], self[1])
FuncNodePtr.__repr__ = lambda self:"FuncNode(%d,%s,%s)" % (self.index(), self[0],self[1])

# comparison and hash operators are required so that nodes can be
# looked up in dictionaries, and so that the same C++ node shows up as
# the same Python node in comparisons.

def _NodePtr___lt__(self, other):
    if not isinstance(other, NodePtr):
        return NotImplemented
    return self.index() < other.index()
NodePtr.__lt__ = _NodePtr___lt__

def _NodePtr___gt__(self, other):
    if not isinstance(other, NodePtr):
        return NotImplemented
    return self.index() > other.index()
NodePtr.__gt__ = _NodePtr___gt__

def _NodePtr___le__(self, other):
    if not isinstance(other, NodePtr):
        return NotImplemented
    return self.index() <= other.index()
NodePtr.__le__ = _NodePtr___le__

def _NodePtr___ge__(self, other):
    if not isinstance(other, NodePtr):
        return NotImplemented
    return self.index() >= other.index()
NodePtr.__ge__ = _NodePtr___ge__

def _NodePtr___eq__(self, other):
    if not isinstance(other, NodePtr):
        return NotImplemented
    return self.index() == other.index()
NodePtr.__eq__ = _NodePtr___eq__

def _NodePtr___ne__(self, other):
    if not isinstance(other, NodePtr):
        return NotImplemented
    return self.index() != other.index()
NodePtr.__ne__ = _NodePtr___ne__

def _NodePtr___hash__(self):
    return self.index()
NodePtr.__hash__ = _NodePtr___hash__

from ooflib.SWIG.common.coord import CoordPtr
