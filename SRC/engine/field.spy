# -*- python -*-


# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov.

import types
from ooflib.common import debug
from ooflib.common import utils
from ooflib.SWIG.engine import fieldindex

Field.__repr__ = Field.name
CompoundField.__repr__ = CompoundField.name
ScalarField.__repr__ = ScalarField.name
TwoVectorField.__repr__ = TwoVectorField.name
ThreeVectorField.__repr__ = ThreeVectorField.name
SymmetricTensorField.__repr__ = SymmetricTensorField.name

#-----------------

# Fields are sometimes stored in an OrderedSet and so need to have
# __lt__ defined.

def _Field___lt__(self, other):
    try:
        return self.objectid() < other.objectid()
    except:
        return NotImplemented

Field.__lt__ = _Field___lt__

def _Field___hash__(self):
    return self.objectid()

Field.__hash__ = _Field___hash__

################

_allFields = {}                 # dict of Fields keyed by name

# allCompoundFields is like _allFields, but it only includes
# CompoundFields.  It's an OrderedDict because it's used to list
# Fields in the GUI, where we want the order to be predictable.
# allCompoundFields is used externally.
allCompoundFields = utils.OrderedDict()

def newField(fld):
    _allFields[fld.name()] = fld

def newCompoundField(fld):
    newField(fld)
    allCompoundFields[fld.name()] = fld

def getField(name):
    return _allFields[name]

utils.OOFdefine('getField', getField)

def allFields():
    return list(_allFields.values())

## TODO PYTHON3: Do we need this?
#from ooflib.SWIG.engine.freedom import DegreeOfFreedom


