# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov. 


from ooflib.common import debug

_labels = ["X-component", "Y-component", "Z-component"]

# Header and representation data for OutputVal classes ---
# used by analysis machinery to format the output.

# Return appropriate subset of "X", "Y", "Z" if size is less than
# three, otherwise return numeric component indices starting from 1.
def _VectorOutputVal_label_list(self):
    s = self.size()
    if s <= len(_labels):
        return _labels[:s]
    else:
        return [repr(x)+'-component' for x in range(1,s+1)]

VectorOutputVal.label_list = _VectorOutputVal_label_list

def _ScalarOutputVal_label_list(self):
    return ["Value"]

ScalarOutputVal.label_list = _ScalarOutputVal_label_list


#################################################################

# Arithmetic operations for the OutputVal subclasses.  These must
# create a new object which Python has ownership of, otherwise data
# can get lost.  

def _VectorOutputVal___add__(self, other):
    res = self.clone()
    res._add(other)
    return res

VectorOutputVal.__add__ = _VectorOutputVal___add__
VectorOutputVal.__radd__ = _VectorOutputVal___add__


def _VectorOutputVal___sub__(self, other):
    res = self.clone()
    res._sub(other)
    return res

VectorOutputVal.__sub__ = _VectorOutputVal___sub__

def _ScalarOutputVal___add__(self, other):
    res = ScalarOutputVal(self.value())
    res._add(other)
    return res

ScalarOutputVal.__add__ = _ScalarOutputVal___add__
ScalarOutputVal.__radd__ = _ScalarOutputVal___add__


def _ScalarOutputVal___sub__(self, other):
    res = ScalarOutputVal(self.value())
    res._sub(other)
    return res

ScalarOutputVal.__sub__ = _ScalarOutputVal___sub__

def _OutputVal___pow__(self, power):
    bozo = self.clone()
    bozo.component_pow(power)
    return bozo

OutputVal.__pow__ = _OutputVal___pow__


# Multiplication and division only defined for scalar operands, of course.

def _VectorOutputVal___mul__(self, other):
    res = self.clone()
    res._mul(other)
    return res

VectorOutputVal.__mul__ = _VectorOutputVal___mul__
VectorOutputVal.__rmul__ = _VectorOutputVal___mul__


def _VectorOutputVal___div__(self, other):
    res = self.clone()
    res._mul(1.0/other)
    return res

VectorOutputVal.__div__ = _VectorOutputVal___div__


def _ScalarOutputVal___mul__(self, other):
    res = ScalarOutputVal(self.value())
    res._mul(other)
    return res

ScalarOutputVal.__mul__ = _ScalarOutputVal___mul__
ScalarOutputVal.__rmul__ = _ScalarOutputVal___mul__


def _ScalarOutputVal___div__(self, other):
    res = ScalarOutputVal(self.value())
    res._mul(1.0/other)
    return res

ScalarOutputVal.__div__ = _ScalarOutputVal___div__

# We need rdiv as well as div in order to compute 1/ScalarOutputVal.
def _ScalarOutputVal__rdiv__(self, other):
    return other * (1.0/self.value())

ScalarOutputVal.__rdiv__ = _ScalarOutputVal__rdiv__
    
##############################

# Range is only meaningful for scalars.

def _ScalarOutputVal_expandRange(self, vmin, vmax):
    v = self.value()
    if vmin is not None:
        vmin = min(vmin, v)
    else:
        vmin = v
    if vmax is not None:
        vmax = max(vmax, v)
    else:
        vmax = v
    return (vmin, vmax)

ScalarOutputVal.expandRange = _ScalarOutputVal_expandRange

def _ScalarOutputVal_initRange(self):
    return None

ScalarOutputVal.initRange = _ScalarOutputVal_initRange

##############################

def _OutputValue___repr__(self):
    return repr(self.valuePtr())

OutputValue.__repr__ = _OutputValue___repr__


def _OutputValue__add__(self):
    res = OutputValue(self)
    res._add(other)
    return res

OutputValue.__add__ = _OutputValue__add__

def _OutputValue__mul__(self,other):
    res = OutputValue(self)
    res._mul(other)
    return res

OutputValue.__mul__ = _OutputValue__mul__

##############################

from ooflib.common.IO import parameter

## OutputValParameter is (probably) just used when specifying inputs
## for Outputs.

class OutputValParameter(parameter.Parameter):
    types=(OutputVal,)
