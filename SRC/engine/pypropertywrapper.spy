# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov. 

from ooflib.common import debug

## TODO: FIX THIS.  We shouldn't have to import smallsystem here.  But
## if we don't, then the SmallSystem that gets passed to flux_matrix
## in PyHeatConductivity, for example, doesn't have the methods that
## are added to it by smallsystem.py.  The simplest fix would be to
## move those methods to C++ and swig them.
from ooflib.SWIG.engine import smallsystem

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# C++ PyPropertyWrapper objects need access to "self", since they
# store a reference to the Python object.  Instead of passing it in
# twice, we redefine the SWIG-generated __init__ to use the single
# argument in two ways.

def _PyFluxProperty___init__(self, *args, **kwargs):
    realargs = (self,) + args
    _pypropertywrapper.PyFluxProperty_swiginit(
        self, _pypropertywrapper.new_PyFluxProperty(*realargs, **kwargs))

PyFluxProperty.__init__ = _PyFluxProperty___init__

def _PyEqnProperty___init__(self, *args, **kwargs):
    realargs = (self,) + args
    _pypropertywrapper.PyEqnProperty_swiginit(
        self, _pypropertywrapper.new_PyEqnProperty(*realargs, **kwargs))

PyEqnProperty.__init__ = _PyEqnProperty___init__

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# Utility functions to support storing data in an element.

## TODO: Finish writing this.

# def _PyPropertyWrapper_data_to_element(self, element, name, data):
#     pass

# # Sensible display string for element data.
# def _PyPropertyElementData___repr__(self):
#     return "PyPropertyElementData(%s,%s)" % (self.name(), repr(self.data()))

# PyPropertyElementData.__repr__ = _PyPropertyElementData___repr__

