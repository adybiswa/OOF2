# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov. 

# These are the Pythonized wrappers for the virtual functions
# of the Property class, as seen from Python.  They are called
# back from the C++ PyPropertyWrapper class, and in turn call
# the corresponding methods of the derived pure-Python
# property.  Their primary function is to wrap their arguments
# in the swigged constructors, so all the SWIG'd methods
# are available in the derived-class routine.

from ooflib.SWIG.common import ooferror
from ooflib.SWIG.engine import csubproblem
from ooflib.SWIG.engine import element
from ooflib.SWIG.engine import elementnodeiterator
from ooflib.SWIG.engine import equation
from ooflib.SWIG.engine import femesh
from ooflib.SWIG.engine import flux
from ooflib.SWIG.engine import property
from ooflib.SWIG.engine import mastercoord
from ooflib.SWIG.engine import material
from ooflib.SWIG.engine import smallsystem
from ooflib.SWIG.engine.IO import propertyoutput
from ooflib.common import debug

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# C++ PyPropertyWrapper objects need access to "self", since they
# store a reference to the Python object.  Instead of passing it in
# twice, we redefine the SWIG-generated __init__ to use the single
# argument in two ways.

def _PyFluxProperty___init__(self, *args, **kwargs):
    realargs = (self,) + args
    _pypropertywrapper.PyFluxProperty_swiginit(
        self, _pypropertywrapper.new_PyFluxProperty(*realargs, **kwargs))

PyFluxProperty.__init__ = _PyFluxProperty___init__

def _PyEqnProperty___init__(self, *args, **kwargs):
    realargs = (self,) + args
    _pypropertywrapper.PyEqnProperty_swiginit(
        self, _pypropertywrapper.new_PyEqnProperty(*realargs, **kwargs))

PyEqnProperty.__init__ = _PyEqnProperty___init__

#=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=##=--=#

# Commented this out to see if it's used. 

# # Utility functions to support storing data in an element.
# def _PyPropertyWrapper_data_to_element(self, element, name, data):
#     pass

# # Sensible display string for element data.
# def _PyPropertyElementData___repr__(self):
#     return "PyPropertyElementData(%s,%s)" % (self.name(), repr(self.data()))

# PyPropertyElementData.__repr__ = _PyPropertyElementData___repr__

