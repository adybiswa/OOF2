# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov.

from ooflib.common import debug

def _VContainerNode___iter__(self):
    cbegin = self.c_begin()
    cend = self.c_end()
    while cbegin != cend:
        yield cbegin.node()
        cbegin.increment()

VContainerNode.__iter__ = _VContainerNode___iter__
VContainerFuncNode.__iter__ = _VContainerNode___iter__

# OLD BELOW HERE

## TODO PYTHON3: Instead of defining __getitem__ and __next__, just
## make __iter__ a generator function.

def _NodeIterator___getitem__(self, idx):
    if self.end():
        raise IndexError
    ans = self.node()
    self.increment()
    return ans

NodeIterator.__getitem__ = _NodeIterator___getitem__

def _NodeIterator___iter__(self):
    return self

NodeIterator.__iter__ = _NodeIterator___iter__

def _NodeIterator___next__(self):
    if self.end():
        raise StopIteration
    val = self.node()
    self.increment()
    return val

NodeIterator.__next__ = _NodeIterator___next__

#=--=##=--=##=--=##=--=##=--=##=--=##=--=#

def _FuncNodeIterator___getitem__(self,idx):
    if self.end():
        raise IndexError
    ans = self.node()
    self.increment()
    return ans

FuncNodeIterator.__getitem__ = _FuncNodeIterator___getitem__

def _FuncNodeIterator___iter__(self):
    return self

FuncNodeIterator.__iter__ = _FuncNodeIterator___iter__

def _FuncNodeIterator___next__(self):
    if self.end():
        raise StopIteration
    val = self.node()
    self.increment()
    return val

FuncNodeIterator.__next__ = _FuncNodeIterator___next__

#=--=##=--=##=--=##=--=##=--=##=--=##=--=#

def _ElementIterator___getitem__(self, idx):
    if self.end():
        raise IndexError
    ans = self.element()
    self.increment()
    return ans

ElementIterator.__getitem__ = _ElementIterator___getitem__

def _ElementIterator___iter__(self):
    return self

ElementIterator.__iter__ = _ElementIterator___iter__

def _ElementIterator___next__(self):
    if self.end():
        raise StopIteration
    val = self.element()
    self.increment()
    return val

ElementIterator.__next__ = _ElementIterator___next__
