# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov. 

from ooflib.common import enum
from ooflib.common import debug
from ooflib.common.IO import xmlmenudump

# Global function that gets the master element array from C.  While
# doing so, it does some precomputation in MasterElement.__init__().

_masterElementDict = {}

def getMasterElementDict():
    ## TODO: Each time this is called, it fetches the list of master
    ## elements from C++ and checks to see if there are any new ones.
    ## This seems inefficient.  If we just required all MasterElement
    ## classes to register themselves when first imported, we could
    ## wrap them and put them in _masterElementDict then, and not have
    ## to fetch the list all the time.
    lst = masterElementList()
    for me in lst:
        # This is where the singleton instance of each MasterElement
        # type is created in Python.  The C++ singletons when the
        # python wrapper files were loaded, by the *init() calls in
        # the SRC/engine/elements/*.spy files.
        if me.name() not in _masterElementDict:
            # Make lists of nodes that have to be created -- these are
            # in a dictionary indexed by the edge number, plus a
            # special entry indexed by the string 'interior'.  Corner
            # nodes are entirely omitted from the indexing scheme
            # because they're created automatically.
            me.protodic = {'interior':[]}
            for i in range(me.nsides()):
                me.protodic[i] = []
            for i in range(me.nnodes()):
                proto = me.get_protonode(i)
                n = proto.nedges() # number of edges this node is on
                if n == 0:
                    me.protodic['interior'].append(proto)
                elif n == 1:
                    edgeno = proto.getedge(0)
                    me.protodic[edgeno].append(proto)
                
            _masterElementDict[me.name()] = me
    return _masterElementDict

# Export this function to restricted namespace.
from ooflib.common import utils
utils.OOFdefine('getMasterElementDict', getMasterElementDict)

########################

_masterElementEnumDict = {}
_enumunsorted = {}

def getMasterElementEnums():
    # Create and update Enum classes for MasterElement types.  There
    # is a separate enum class for each element geometry (number of
    # sides).  This function returns a dictionary containing the
    # classes, keyed by the number of sides of the elements.
    edict = getMasterElementDict()
    for name, el in edict.items():
        try:
            enumclass = _masterElementEnumDict[el.ncorners()]
        except KeyError:
            n = el.ncorners()
            utils.OOFexec('from ooflib.common import enum')
            utils.OOFexec(f'class Element{n}(enum.EnumClass()):pass')
            enumclass = utils.OOFeval(f'Element{n}')
            enumclass.tip = f"{n} cornered finite elements."
            enumclass.discussion = xmlmenudump.loadFile(
                f"DISCUSSIONS/engine/enum/element{n}.xml")
            _masterElementEnumDict[n] = enumclass
            enumclass._sorted = 1
        if name not in enumclass.names:
            enum.addEnumName(enumclass, name, el.description())
            enumclass._sorted = 0
    for enumclass in _masterElementEnumDict.values():
        if not enumclass._sorted:
            enumclass.names.sort(key=melcomparisionkey)
            enumclass._sorted = 1
    return _masterElementEnumDict

def getMasterElementGeometries():
    keys = sorted(list(getMasterElementEnums().keys()))
    return keys

def getMasterElementEnumClasses():
    # Returns a sorted list of the MasterElement enum classes.
    return [_masterElementEnumDict[g] for g in getMasterElementGeometries()]

def getMasterElementFromEnum(elementenum):
    edict = getMasterElementDict()
    return edict[elementenum.name]

def getMasterElementsFromEnumClass(enumclass):
    edict = getMasterElementDict()
    return [edict[name] for name in enumclass.names]
        
def melcomparisionkey(elem):
    # For sorting MasterElement names to determine their position in the GUI.
    edict = getMasterElementDict()
    el = edict[elem]
    return (el.nnodes(), el.nmapnodes(), el.nfuncnodes())
