# -*- python -*-

# This software was produced by NIST, an agency of the U.S. government,
# and by statute is not subject to copyright in the United States.
# Recipients of this software assume all responsibilities associated
# with its operation, modification and maintenance. However, to
# facilitate maintenance we ask that before distributing modified
# versions of this software, you first contact the authors at
# oof_manager@nist.gov. 

from ooflib.common import debug
#from ooflib.common import parallel_enable
from ooflib.common import primitives
from ooflib.image import imagecontext
import os

def readImage(filename, **kwargs):
    # 'height' and 'width' keywords are optional.  If neither is
    # given, the height and width are the image size in pixels.  If
    # just one is given, the other is determined from the aspect
    # ratio.  If both are given, the image may be distorted.

    # Colons in image names are disallowed, because we use them as
    # separators in the labeltree.
    basename = os.path.basename(filename).replace(':','.')
    
    image = OOFImage(basename, filename)
    # Set physical size of image
    pixelsize = image.sizeInPixels()    # iPoint
    given_height = 'height' in kwargs
    given_width = 'width' in kwargs
    if not (given_height or given_width):
        width = float(pixelsize.x)
        height = float(pixelsize.y)
    elif given_width and given_height:
        width = float(kwargs['width'])
        height = float(kwargs['height'])
    else:
        aspect = float(pixelsize.x)/pixelsize.y
        if given_width:
            width = float(kwargs['width'])
            height = width/aspect
        elif given_height:
            height = float(kwargs['height'])
            width = height*aspect
    image.setSize(primitives.Point(width, height))

    return image


## TODO NUMPY: We could have separate classes of OOFImage depending on
## the depth of the scikit-image image: gray, RGB, RGBA, all with a
## template parameter for byte, int, and float data.

import skimage.io
import numpy

def printnpcolor(npimage, i, j):
    vals = npimage[i,j]
    debug.fmsg(f"npimage[{i}, {j}] = {vals} {list(x/255 for x in vals)}")

def readNumpyImage(filename, **kwargs):
    npimage = skimage.io.imread(filename) # numpy.ndarray object
    ## Convert to 8 bits per channel.  TODO NUMPY: Do we need to do this?
    ## TODO NUMPY: Convert to doubles via img_as_float64
    npimage = skimage.util.img_as_ubyte(npimage)
    # Flip along the y axis (so that y coord increases upwards)
    npimage = numpy.flip(npimage, 0)
    # Make a copy so that the flipped data is actually stored in the
    # numpy array.
    npimage = npimage.copy()

    ## TODO: Store npimage somewhere in python, not just C++, so that
    ## we can call skimage routines directly on it.
    
    # Colons in image names are disallowed, because we use them as
    # separators in the labeltree.
    basename = os.path.basename(filename).replace(':','.')
    image = OOFImage(basename, filename, npimage)
    # Set physical size of image
    pixelsize = image.sizeInPixels()    # iPoint
    given_height = 'height' in kwargs
    given_width = 'width' in kwargs
    if not (given_height or given_width):
        width = float(pixelsize.x)
        height = float(pixelsize.y)
    elif given_width and given_height:
        width = float(kwargs['width'])
        height = float(kwargs['height'])
    else:
        aspect = float(pixelsize.x)/pixelsize.y
        if given_width:
            width = float(kwargs['width'])
            height = width/aspect
        elif given_height:
            height = float(kwargs['height'])
            width = height*aspect
    image.setSize(primitives.Point(width, height))

    return image

def _getTimeStamp_optional_args(self, *args):
    return self._getTimeStamp()
OOFImage.getTimeStamp = _getTimeStamp_optional_args

def getImage(imagename):
    ## returns the actual image
    ## imagename = microstructurename:image_name OR imagename = [microstructurename, image_name]
    return imagecontext.imageContexts[imagename].getObject()

def pushModification(imagename, image):
    imagecontext.imageContexts[imagename].pushModification(image)

def undoModification(imagename):
    imagecontext.imageContexts[imagename].undoModification()

def redoModification(imagename):
    imagecontext.imageContexts[imagename].redoModification()

def undoable(imagename):
    return imagecontext.imageContexts[imagename].undoable()

def redoable(imagename):
    return imagecontext.imageContexts[imagename].redoable()


# # Parallel image send/recv
# if parallel_enable.enabled():
#     def Send_Image(image, destinations, tag=0):
#         _Send_Image(image, destinations, tag)

#     def Recv_Image(origin, tag=0):
#         return _Recv_Image(origin, tag)
